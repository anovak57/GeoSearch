// <auto-generated />
using GeoSearch.DataAccessLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GeoSearch.DataAccessLayer.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241217121001_ConnectLocationWithSearchRequest")]
    partial class ConnectLocationWithSearchRequest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GeoLocationGeoLocationSearch", b =>
                {
                    b.Property<int>("GeoLocationSearchesId")
                        .HasColumnType("integer");

                    b.Property<int>("GeoLocationsId")
                        .HasColumnType("integer");

                    b.HasKey("GeoLocationSearchesId", "GeoLocationsId");

                    b.HasIndex("GeoLocationsId");

                    b.ToTable("GeoLocationGeoLocationSearch", (string)null);
                });

            modelBuilder.Entity("GeoSearch.DataAccessLayer.Entities.AppUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GeoSearch.DataAccessLayer.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("GeoSearch.DataAccessLayer.Entities.FavouriteLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("FavouriteLocations");
                });

            modelBuilder.Entity("GeoSearch.DataAccessLayer.Entities.GeoLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GeoLocations");
                });

            modelBuilder.Entity("GeoSearch.DataAccessLayer.Entities.GeoLocationSearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Query")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Radius")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("GeoLocationSearches");
                });

            modelBuilder.Entity("GeoSearch.DataAccessLayer.Entities.LocationCategory", b =>
                {
                    b.Property<int>("GeoLocationId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("GeoLocationId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("LocationCategory");
                });

            modelBuilder.Entity("GeoLocationGeoLocationSearch", b =>
                {
                    b.HasOne("GeoSearch.DataAccessLayer.Entities.GeoLocationSearch", null)
                        .WithMany()
                        .HasForeignKey("GeoLocationSearchesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoSearch.DataAccessLayer.Entities.GeoLocation", null)
                        .WithMany()
                        .HasForeignKey("GeoLocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeoSearch.DataAccessLayer.Entities.FavouriteLocation", b =>
                {
                    b.HasOne("GeoSearch.DataAccessLayer.Entities.GeoLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoSearch.DataAccessLayer.Entities.AppUser", "User")
                        .WithMany("FavouriteLocations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GeoSearch.DataAccessLayer.Entities.LocationCategory", b =>
                {
                    b.HasOne("GeoSearch.DataAccessLayer.Entities.Category", "Category")
                        .WithMany("LocationCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GeoSearch.DataAccessLayer.Entities.GeoLocation", "GeoLocation")
                        .WithMany("LocationCategories")
                        .HasForeignKey("GeoLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("GeoLocation");
                });

            modelBuilder.Entity("GeoSearch.DataAccessLayer.Entities.AppUser", b =>
                {
                    b.Navigation("FavouriteLocations");
                });

            modelBuilder.Entity("GeoSearch.DataAccessLayer.Entities.Category", b =>
                {
                    b.Navigation("LocationCategories");
                });

            modelBuilder.Entity("GeoSearch.DataAccessLayer.Entities.GeoLocation", b =>
                {
                    b.Navigation("LocationCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
